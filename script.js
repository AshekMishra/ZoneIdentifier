function interpolate(x, x1, x2, y1, y2) {
	let y = ((x - x1) * (y2 - y1) / (x2 - x1)) + y1;
	return y;
}
function getUpperTemp(temperature) {
	let ready = temperature / 10;
	let bound = Math.round(ready);
	let upper = 0.0;
	let lower = 0.0;

	if ((ready - bound) > 0) {
		lower = bound * 10;
		upper = lower + 5;
	}
	else {
		upper = bound * 10;
		lower = upper - 5;
	}
	if (temperature <= 370)
		return upper;
	else
		return 373.95;
}
function getLowerTemp(temperature) {
	let ready = temperature / 10;
	let bound = Math.round(ready);
	let upper = 0.0;
	let lower = 0.0;

	if ((ready - bound) > 0) {
		lower = bound * 10;
		upper = lower + 5;
	}
	else {
		upper = bound * 10;
		lower = upper - 5;
	}
	if (temperature >= 5)
		return lower;
	else
		return 0.01;
}
function getLowerPressure(pressure) {
	let tbr = 0;
	// let round = Math.round(pressure);
	if (pressure <= 3) {
		if (round > pressure)
			tbr = round - 0.5;
		else
			tbr = round;
	}
	else if (pressure <= 5)
		tbr = Math.floor(pressure);
	else if (pressure <= 7.5)
		tbr = 5;
	else if (pressure <= 10)
		tbr = 7.5;
	else if (pressure <= 30)
		tbr = pressure - (pressure % 5);
	else if (pressure <= 50)
		tbr = pressure - (pressure % 10);
	else if (pressure <= 400)
		tbr = pressure - (pressure % 25);
	else if (pressure <= 1000)
		tbr = pressure - (pressure % 50);
	else if (pressure <= 1500)
		tbr = pressure - (pressure % 100);
	else if (pressure <= 2500)
		tbr = pressure - (pressure % 250);
	else if (pressure <= 4000)
		tbr = pressure - (pressure % 500);
	else if (pressure <= 22000)
		tbr = pressure - (pressure % 1000);
	else
		tbr = 22000;
	return tbr;
}

function getUpperPressure(pressure) {
	let tbr = 0;
	//let round= Math.round(pressure);
	if (pressure <= 3)
		tbr = pressure + (0.5 - pressure % 0.5);
	else if (pressure <= 5)
		tbr = Math.ceil(pressure);
	else if (pressure <= 7.5)
		tbr = 7.5;
	else if (pressure <= 10)
		tbr = 10;
	else if (pressure <= 30)
		tbr = pressure - pressure % 5 + 5;
	else if (pressure <= 50)
		tbr = pressure - pressure % 10 + 10;
	else if (pressure <= 400)
		tbr = pressure - pressure % 25 + 25;
	else if (pressure <= 1000)
		tbr = pressure - pressure % 50 + 50;
	else if (pressure <= 1500)
		tbr = pressure - pressure % 100 + 100;
	else if (pressure <= 2500)
		tbr = pressure - pressure % 250 + 250;
	else if (pressure <= 4000)
		tbr = pressure - pressure % 500 + 500;
	else if (pressure <= 22000)
		tbr = pressure - pressure % 1000 + 1000;
	else
		tbr = 22064;
	return tbr;
}

const tp = new Map([
	[0.01, 0.6117],
	[5.0, 0.8725],
	[10.0, 1.2281],
	[15.0, 1.7057],
	[20.0, 2.3392],
	[25.0, 3.1698],
	[30.0, 4.2469],
	[35.0, 5.6291],
	[40.0, 7.3851],
	[45.0, 9.5953],
	[50.0, 12.352],
	[55.0, 15.763],
	[60.0, 19.947],
	[65.0, 25.043],
	[70.0, 31.202],
	[75.0, 38.597],
	[80.0, 47.416],
	[85.0, 57.868],
	[90.0, 70.183],
	[95.0, 84.609],
	[100.0, 101.42],
	[105.0, 120.90],
	[110.0, 143.38],
	[115.0, 169.18],
	[120.0, 198.67],
	[125.0, 232.23],
	[130.0, 270.28],
	[135.0, 313.22],
	[140.0, 361.53],
	[145.0, 415.68],
	[150.0, 476.16],
	[155.0, 543.49],
	[160.0, 618.23],
	[165.0, 700.93],
	[170.0, 792.18],
	[175.0, 892.60],
	[180.0, 1002.8],
	[185.0, 1123.5],
	[190.0, 1255.2],
	[195.0, 1398.8],
	[200.0, 1554.9],
	[205.0, 1724.3],
	[210.0, 1907.7],
	[215.0, 2105.9],
	[220.0, 2319.6],
	[225.0, 2549.7],
	[230.0, 2797.1],
	[235.0, 3062.6],
	[240.0, 3347.0],
	[245.0, 3651.2],
	[250.0, 3976.2],
	[255.0, 4322.9],
	[260.0, 4692.3],
	[265.0, 5085.3],
	[270.0, 5503.0],
	[275.0, 5946.4],
	[280.0, 6416.6],
	[285.0, 6914.6],
	[290.0, 7441.8],
	[295.0, 7999.0],
	[300.0, 8587.9],
	[305.0, 9209.4],
	[310.0, 9865.0],
	[315.0, 10556.0],
	[320.0, 11284.0],
	[325.0, 12051.0],
	[330.0, 12858.0],
	[335.0, 13707.0],
	[340.0, 14601.0],
	[345.0, 15541.0],
	[350.0, 16529.0],
	[355.0, 17570.0],
	[360.0, 18666.0],
	[365.0, 19822.0],
	[370.0, 21044.0],
	[373.9, 22064.0],
]);

const tv = new Map([
	[0.01, [0.001000, 206.00]],
	[5.0, [0.001000, 147.03]],
	[10.0, [0.001000, 106.32]],
	[15.0, [0.001001, 77.885]],
	[20.0, [0.001002, 57.762]],
	[25.0, [0.001003, 43.340]],
	[30.0, [0.001004, 32.879]],
	[35.0, [0.001006, 25.205]],
	[40.0, [0.001008, 19.515]],
	[45.0, [0.001010, 15.251]],
	[50.0, [0.001012, 12.026]],
	[55.0, [0.001015, 9.5639]],
	[60.0, [0.001017, 7.6670]],
	[65.0, [0.001020, 6.1935]],
	[70.0, [0.001023, 5.0396]],
	[75.0, [0.001026, 4.1291]],
	[80.0, [0.001029, 3.4053]],
	[85.0, [0.001032, 2.8261]],
	[90.0, [0.001036, 2.3593]],
	[95.0, [0.001040, 1.9808]],
	[100.0, [0.001043, 1.6720]],
	[105.0, [0.001047, 1.4186]],
	[110.0, [0.001052, 1.2094]],
	[115.0, [0.001056, 1.0360]],
	[120.0, [0.001060, 0.89133]],
	[125.0, [0.001065, 0.77012]],
	[130.0, [0.001070, 0.66808]],
	[135.0, [0.001075, 0.58179]],
	[140.0, [0.001080, 0.50850]],
	[145.0, [0.001085, 0.44600]],
	[150.0, [0.001091, 0.39248]],
	[155.0, [0.001096, 0.34648]],
	[160.0, [0.001102, 0.30680]],
	[165.0, [0.001108, 0.27244]],
	[170.0, [0.001114, 0.24260]],
	[175.0, [0.001121, 0.21659]],
	[180.0, [0.001127, 0.19384]],
	[185.0, [0.001134, 0.17390]],
	[190.0, [0.001141, 0.15636]],
	[195.0, [0.001149, 0.14089]],
	[200.0, [0.001157, 0.12721]],
	[205.0, [0.001164, 0.11508]],
	[210.0, [0.001173, 0.10429]],
	[215.0, [0.001181, 0.094680]],
	[220.0, [0.001190, 0.086094]],
	[225.0, [0.001199, 0.078405]],
	[230.0, [0.001209, 0.071505]],
	[235.0, [0.001219, 0.065300]],
	[240.0, [0.001229, 0.059707]],
	[245.0, [0.001240, 0.054656]],
	[250.0, [0.001252, 0.050085]],
	[255.0, [0.001263, 0.045941]],
	[260.0, [0.001276, 0.042175]],
	[265.0, [0.001289, 0.038748]],
	[270.0, [0.001303, 0.035622]],
	[275.0, [0.001317, 0.032767]],
	[280.0, [0.001333, 0.030153]],
	[285.0, [0.001349, 0.027756]],
	[290.0, [0.001366, 0.025554]],
	[295.0, [0.001384, 0.023528]],
	[300.0, [0.001404, 0.021659]],
	[305.0, [0.001425, 0.019932]],
	[310.0, [0.001447, 0.018333]],
	[315.0, [0.001472, 0.016849]],
	[320.0, [0.001499, 0.015470]],
	[325.0, [0.001528, 0.014183]],
	[330.0, [0.001560, 0.012979]],
	[335.0, [0.001597, 0.011848]],
	[340.0, [0.001638, 0.010783]],
	[345.0, [0.001685, 0.009772]],
	[350.0, [0.001741, 0.008806]],
	[355.0, [0.001808, 0.007872]],
	[360.0, [0.001895, 0.006950]],
	[365.0, [0.002015, 0.006009]],
	[370.0, [0.002217, 0.004953]],
	[373.95, [0.003106, 0.003106]],
]);

const tu = new Map([
	[0.01, [0.000, 2374.9]],
	[5.0, [21.019, 2381.8]],
	[10.0, [42.020, 2388.7]],
	[15.0, [62.980, 2395.5]],
	[20.0, [83.913, 2402.3]],
	[25.0, [104.83, 2409.1]],
	[30.0, [125.73, 2415.9]],
	[35.0, [146.63, 2422.7]],
	[40.0, [167.53, 2429.4]],
	[45.0, [188.43, 2436.1]],
	[50.0, [209.33, 2442.7]],
	[55.0, [230.24, 2449.3]],
	[60.0, [251.16, 2455.9]],
	[65.0, [272.09, 2462.4]],
	[70.0, [293.04, 2468.9]],
	[75.0, [313.99, 2475.3]],
	[80.0, [334.97, 2481.6]],
	[85.0, [355.96, 2487.8]],
	[90.0, [376.97, 2494.0]],
	[95.0, [398.00, 2500.1]],
	[100.0, [419.06, 2506.0]],
	[105.0, [440.15, 2511.9]],
	[110.0, [461.27, 2517.7]],
	[115.0, [482.42, 2523.3]],
	[120.0, [503.60, 2528.9]],
	[125.0, [524.83, 2534.3]],
	[130.0, [546.10, 2539.5]],
	[135.0, [567.41, 2544.7]],
	[140.0, [588.77, 2549.6]],
	[145.0, [610.19, 2554.4]],
	[150.0, [631.66, 2559.1]],
	[155.0, [653.19, 2563.5]],
	[160.0, [674.79, 2567.8]],
	[165.0, [696.46, 2571.9]],
	[170.0, [718.20, 2575.7]],
	[175.0, [740.02, 2579.4]],
	[180.0, [761.92, 2582.8]],
	[185.0, [783.91, 2586.0]],
	[190.0, [806.00, 2589.0]],
	[195.0, [828.18, 2591.7]],
	[200.0, [850.46, 2594.2]],
	[205.0, [872.86, 2596.4]],
	[210.0, [895.38, 2598.3]],
	[215.0, [918.02, 2599.9]],
	[220.0, [940.79, 2601.3]],
	[225.0, [963.70, 2602.3]],
	[230.0, [986.76, 2602.9]],
	[240.0, [1033.4, 2603.1]],
	[245.0, [1056.9, 2602.7]],
	[250.0, [1080.7, 2601.8]],
	[255.0, [1104.7, 2600.5]],
	[260.0, [1128.8, 2598.7]],
	[265.0, [1153.3, 2596.5]],
	[270.0, [1177.9, 2593.7]],
	[275.0, [1202.9, 2590.3]],
	[280.0, [1228.2, 2586.4]],
	[285.0, [1253.7, 2581.8]],
	[290.0, [1279.7, 2576.5]],
	[295.0, [1306.0, 2570.5]],
	[300.0, [1332.7, 2563.6]],
	[305.0, [1360.0, 2555.8]],
	[310.0, [1387.7, 2547.1]],
	[315.0, [1416.1, 2537.2]],
	[320.0, [1445.1, 2526.0]],
	[325.0, [1475.0, 2513.4]],
	[330.0, [1505.7, 2499.2]],
	[335.0, [1537.5, 2483.0]],
	[340.0, [1570.7, 2464.5]],
	[345.0, [1605.5, 2443.2]],
	[350.0, [1642.4, 2418.3]],
	[355.0, [1682.2, 2388.6]],
	[360.0, [1726.2, 2351.9]],
	[365.0, [1777.2, 2303.6]],
	[370.0, [1844.5, 2230.1]],
	[373.95, [2015.7, 2015.7]],
]);

const th = new Map([
	[0.01, [0.001, 2500.9]],
	[5.0, [21.020, 2510.1]],
	[10.0, [42.022, 2519.2]],
	[15.0, [62.982, 2528.3]],
	[20.0, [83.915, 2537.4]],
	[25.0, [104.83, 2546.5]],
	[30.0, [125.74, 2555.6]],
	[35.0, [146.64, 2564.6]],
	[40.0, [167.53, 2573.5]],
	[45.0, [188.44, 2582.4]],
	[50.0, [209.34, 2591.3]],
	[55.0, [230.26, 2600.1]],
	[60.0, [251.18, 2608.8]],
	[65.0, [272.12, 2617.5]],
	[70.0, [293.07, 2626.1]],
	[75.0, [314.03, 2634.6]],
	[80.0, [335.02, 2643.0]],
	[85.0, [356.02, 2651.4]],
	[90.0, [377.04, 2659.6]],
	[95.0, [398.09, 2667.6]],
	[100.0, [419.17, 2675.6]],
	[105.0, [440.28, 2683.4]],
	[110.0, [461.42, 2691.1]],
	[115.0, [482.59, 2698.6]],
	[120.0, [503.81, 2706.0]],
	[125.0, [525.07, 2713.1]],
	[130.0, [546.38, 2720.1]],
	[135.0, [567.75, 2726.9]],
	[145.0, [610.64, 2739.8]],
	[150.0, [632.18, 2745.9]],
	[155.0, [653.79, 2751.8]],
	[160.0, [675.47, 2757.5]],
	[165.0, [697.24, 2762.8]],
	[170.0, [719.08, 2767.9]],
	[175.0, [741.02, 2772.7]],
	[180.0, [763.05, 2777.2]],
	[185.0, [785.19, 2781.4]],
	[195.0, [829.78, 2788.8]],
	[200.0, [852.26, 2792.0]],
	[205.0, [874.87, 2794.8]],
	[210.0, [897.61, 2797.3]],
	[215.0, [920.5, 2799.3]],
	[220.0, [943.55, 2801.0]],
	[225.0, [966.76, 2802.2]],
	[230.0, [990.14, 2802.9]],
	[235.0, [1013.7, 2803.2]],
	[240.0, [1037.5, 2803.0]],
	[245.0, [1061.5, 2802.2]],
	[250.0, [1085.7, 2801.0]],
	[255.0, [1110.1, 2799.1]],
	[260.0, [1134.8, 2796.6]],
	[265.0, [1159.8, 2793.5]],
	[270.0, [1185.1, 2789.7]],
	[275.0, [1210.7, 2785.2]],
	[280.0, [1236.7, 2779.9]],
	[285.0, [1263.1, 2773.7]],
	[290.0, [1289.8, 2766.7]],
	[295.0, [1317.1, 2758.7]],
	[300.0, [1344.8, 2749.6]],
	[305.0, [1373.1, 2739.4]],
	[310.0, [1402.0, 2727.9]],
	[315.0, [1431.6, 2715.0]],
	[320.0, [1462.0, 2700.6]],
	[325.0, [1493.4, 2684.3]],
	[330.0, [1525.8, 2666.0]],
	[335.0, [1559.4, 2645.4]],
	[340.0, [1594.6, 2622.0]],
	[345.0, [1631.7, 2595.1]],
	[350.0, [1671.2, 2563.9]],
	[355.0, [1714.0, 2526.9]],
	[360.0, [1761.5, 2481.6]],
	[365.0, [1817.2, 2422.7]],
	[370.0, [1891.2, 2334.3]],
	[373.95, [2084.3, 2084.3]],
]);

const ts = new Map([
	[0.01, [0.0000, 9.1556]],
	[5.0, [0.0763, 9.0249]],
	[10.0, [0.1511, 8.8999]],
	[15.0, [0.2245, 8.7803]],
	[20.0, [0.2965, 8.6661]],
	[25.0, [0.3672, 8.4520]],
	[30.0, [0.4368, 8.4520]],
	[35.0, [0.5051, 8.3517]],
	[40.0, [0.5724, 8.2556]],
	[45.0, [0.6386, 8.1633]],
	[50.0, [0.7038, 8.0748]],
	[55.0, [0.7680, 7.9898]],
	[60.0, [0.8313, 7.9082]],
	[65.0, [0.8937, 7.8296]],
	[70.0, [0.9551, 7.7540]],
	[75.0, [1.0158, 7.6812]],
	[80.0, [1.0756, 7.6111]],
	[85.0, [1.1346, 7.5435]],
	[90.0, [1.1929, 7.4151]],
	[100.0, [1.3072, 7.3542]],
	[105.0, [1.3634, 7.2952]],
	[110.0, [1.4188, 7.2382]],
	[115.0, [1.4737, 7.1829]],
	[120.0, [1.5279, 7.1292]],
	[125.0, [1.5816, 7.0771]],
	[130.0, [1.6346, 7.0265]],
	[135.0, [1.6872, 6.9773]],
	[140.0, [1.7392, 6.9294]],
	[145.0, [1.7908, 6.8827]],
	[150.0, [1.8418, 6.8371]],
	[155.0, [1.8924, 6.7927]],
	[160.0, [1.9426, 6.7492]],
	[165.0, [1.9923, 6.7067]],
	[170.0, [2.0417, 6.6650]],
	[175.0, [2.0906, 6.6242]],
	[180.0, [2.1392, 6.5841]],
	[185.0, [2.1875, 6.5447]],
	[190.0, [2.2355, 6.5059]],
	[195.0, [2.2831, 6.4678]],
	[200.0, [2.3305, 6.4302]],
	[205.0, [2.3776, 6.3930]],
	[210.0, [2.4245, 6.3563]],
	[215.0, [2.4712, 6.3200]],
	[220.0, [2.5176, 6.2840]],
	[225.0, [2.5639, 6.2483]],
	[230.0, [2.6100, 6.2128]],
	[235.0, [2.6560, 6.1775]],
	[240.0, [2.7018, 6.1424]],
	[245.0, [2.7476, 6.1072]],
	[250.0, [2.7933, 6.0721]],
	[255.0, [2.8390, 6.0369]],
	[260.0, [2.8847, 6.0017]],
	[265.0, [2.9304, 5.9662]],
	[270.0, [2.9762, 5.9305]],
	[275.0, [3.0221, 5.8944]],
	[280.0, [3.0681, 5.8579]],
	[285.0, [3.1144, 5.8210]],
	[290.0, [3.1608, 5.7834]],
	[295.0, [3.2076, 5.7450]],
	[300.0, [3.2548, 5.7059]],
	[305.0, [3.3024, 5.6657]],
	[310.0, [3.3506, 5.6243]],
	[315.0, [3.3994, 5.5816]],
	[320.0, [3.4491, 5.5372]],
	[325.0, [3.4998, 5.4908]],
	[330.0, [3.5516, 5.4422]],
	[335.0, [3.6050, 5.390]],
	[340.0, [3.6602, 5.3358]],
	[345.0, [3.7179, 5.2765]],
	[350.0, [3.7788, 5.2114]],
	[355.0, [3.8442, 5.1384]],
	[360.0, [3.9165, 5.0537]],
	[365.0, [4.0004, 4.9493]],
	[370.0, [4.1119, 4.8009]],
	[373.95, [4.4070, 4.4070]],
]);

const pv = new Map([
	[1.0, [0.001000, 129.19]],
	[1.5, [0.001001, 87.964]],
	[2.0, [0.001001, 66.990]],
	[2.5, [0.001002, 54.242]],
	[3.0, [0.001003, 45.654]],
	[4.0, [0.001004, 34.791]],
	[5.0, [0.001005, 28.185]],
	[7.5, [0.001008, 19.233]],
	[10.0, [0.001010, 14.670]],
	[15.0, [0.001014, 10.020]],
	[20.0, [0.001017, 7.6481]],
	[25.0, [0.001020, 6.2034]],
	[30.0, [0.001022, 5.2287]],
	[40.0, [0.001026, 3.9933]],
	[50.0, [0.001030, 3.2403]],
	[75.0, [0.001037, 2.2172]],
	[100.0, [0.001043, 1.6941]],
	[101.325, [0.001043, 1.6734]],
	[125.0, [0.001048, 1.3750]],
	[150.0, [0.001053, 1.1594]],
	[175.0, [0.001057, 1.0037]],
	[200.0, [0.001061, 0.88578]],
	[225.0, [0.001064, 0.79329]],
	[250.0, [0.001067, 0.71873]],
	[275.0, [0.001070, 0.65732]],
	[300.0, [0.001073, 0.60582]],
	[325.0, [0.001076, 0.56199]],
	[350.0, [0.001079, 0.52422]],
	[375.0, [0.001081, 0.49133]],
	[400.0, [0.001084, 0.46242]],
	[450.0, [0.001088, 0.41392]],
	[500.0, [0.001093, 0.37483]],
	[550.0, [0.001097, 0.34261]],
	[600.0, [0.001101, 0.31560]],
	[650.0, [0.001104, 0.29260]],
	[700.0, [0.001108, 0.27278]],
	[750.0, [0.001111, 0.25552]],
	[800.0, [0.001115, 0.24035]],
	[900.0, [0.001121, 0.21489]],
	[950.0, [0.001124, 0.20411]],
	[1000.0, [0.001127, 0.19436]],
	[1100.0, [0.001133, 0.17745]],
	[1200.0, [0.001138, 0.16326]],
	[1300.0, [0.001144, 0.15119]],
	[1400.0, [0.001149, 0.14078]],
	[1500.0, [0.001154, 0.13171]],
	[1750.0, [0.001166, 0.11344]],
	[2000.0, [0.001177, 0.099587]],
	[2250.0, [0.001187, 0.08871]],
	[2500.0, [0.001197, 0.079952]],
	[3000.0, [0.001217, 0.066667]],
	[3500.0, [0.001235, 0.057061]],
	[4000.0, [0.001252, 0.049779]],
	[5000.0, [0.001286, 0.039448]],
	[6000.0, [0.001319, 0.032449]],
	[7000.0, [0.001352, 0.027378]],
	[8000.0, [0.001384, 0.023525]],
	[9000.0, [0.001418, 0.020489]],
	[10000.0, [0.001452, 0.018028]],
	[11000.0, [0.001488, 0.015988]],
	[12000.0, [0.001526, 0.014264]],
	[13000.0, [0.001566, 0.012781]],
	[14000.0, [0.001610, 0.011487]],
	[15000.0, [0.001657, 0.010341]],
	[16000.0, [0.001710, 0.009312]],
	[17000.0, [0.001770, 0.008374]],
	[18000.0, [0.001840, 0.007504]],
	[19000.0, [0.001926, 0.006677]],
	[20000.0, [0.002038, 0.005862]],
	[21000.0, [0.002207, 0.004994]],
	[22000.0, [0.002703, 0.003644]],
	[22064.0, [0.003106, 0.003106]],
]);

const pu = new Map([

	[1.0, [29.302, 2384.5]],
	[1.5, [54.686, 2392.8]],
	[2.0, [73.431, 2398.9]],
	[2.5, [88.422, 2403.8]],
	[3.0, [100.98, 2407.9]],
	[4.0, [121.39, 2414.5]],
	[5.0, [137.75, 2419.8]],
	[7.5, [168.74, 2429.8]],
	[10.0, [191.79, 2437.2]],
	[15.0, [225.93, 2448.0]],
	[20.0, [251.40, 2456.0]],
	[25.0, [271.93, 2462.4]],
	[30.0, [289.24, 2467.7]],
	[40.0, [317.58, 2476.3]],
	[50.0, [340.49, 2483.2]],
	[75.0, [384.36, 2496.1]],
	[100.0, [417.40, 2505.6]],
	[101.325, [418.95, 2506.0]],
	[125.0, [444.23, 2513.0]],
	[150.0, [466.97, 2519.2]],
	[175.0, [486.82, 2524.5]],
	[200.0, [504.50, 2529.1]],
	[225.0, [520.47, 2533.2]],
	[250.0, [535.08, 2536.8]],
	[275.0, [548.57, 2540.1]],
	[300.0, [561.11, 2543.2]],
	[325.0, [572.84, 2545.9]],
	[350.0, [583.89, 2548.5]],
	[375.0, [594.32, 2550.9]],
	[400.0, [604.22, 2553.1]],
	[450.0, [622.65, 2557.1]],
	[500.0, [639.54, 2560.7]],
	[550.0, [655.16, 2563.9]],
	[600.0, [669.72, 2566.8]],
	[650.0, [683.37, 2569.4]],
	[700.0, [696.23, 2571.8]],
	[750.0, [708.40, 2574.0]],
	[800.0, [719.97, 2576.0]],
	[850.0, [731.00, 2577.9]],
	[900.0, [741.55, 2579.6]],
	[950.0, [751.67, 2581.3]],
	[1000.0, [761.39, 2582.8]],
	[1100.0, [779.78, 2585.5]],
	[1200.0, [796.96, 2587.8]],
	[1300.0, [813.10, 2589.9]],
	[1400.0, [828.35, 2591.8]],
	[1500.0, [842.82, 2593.4]],
	[1750.0, [876.12, 2596.7]],
	[2000.0, [906.12, 2599.1]],
	[2250.0, [933.54, 2600.9]],
	[2500.0, [958.87, 2602.1]],
	[3000.0, [1004.6, 2603.2]],
	[3500.0, [1045.4, 2603.0]],
	[4000.0, [1082.4, 2601.7]],
	[5000.0, [1148.1, 2597.0]],
	[6000.0, [1205.8, 2589.9]],
	[7000.0, [1258.0, 2581.0]],
	[8000.0, [1306.0, 2570.5]],
	[9000.0, [1350.9, 2558.5]],
	[10000.0, [1393.3, 2545.2]],
	[11000.0, [1433.9, 2530.4]],
	[12000.0, [1473.0, 2514.3]],
	[13000.0, [1511.0, 2496.6]],
	[14000.0, [1548.4, 2477.1]],
	[15000.0, [1585.5, 2455.7]],
	[16000.0, [1622.6, 2432.0]],
	[17000.0, [1660.2, 2405.4]],
	[18000.0, [1699.1, 2375.0]],
	[19000.0, [1740.3, 2339.2]],
	[20000.0, [1785.8, 2294.8]],
	[21000.0, [1841.6, 2233.5]],
	[22000.0, [1951.7, 2092.4]],
	[22064.0, [2015.7, 2015.7]],

]);

const ph = new Map([
	[1.0, [29.303, 2513.7]],
	[1.5, [54.688, 2524.7]],
	[2.0, [73.433, 2532.9]],
	[2.5, [88.424, 2539.4]],
	[3.0, [100.98, 2544.8]],
	[4.0, [121.39, 2553.7]],
	[5.0, [137.75, 2560.7]],
	[7.5, [168.75, 2574.0]],
	[10.0, [191.81, 2583.9]],
	[15.0, [225.94, 2598.3]],
	[20.0, [251.42, 2608.9]],
	[25.0, [271.96, 2617.5]],
	[30.0, [289.27, 2624.6]],
	[40.0, [317.62, 2636.]],
	[50.0, [340.54, 2645.]],
	[75.0, [384.44, 2662.4]],
	[100.0, [417.51, 2675.0]],
	[101.325, [419.06, 2675.6]],
	[125.0, [444.36, 2684.9]],
	[150.0, [467.13, 2693.1]],
	[175.0, [487.01, 2700.2]],
	[200.0, [504.71, 2706.3]],
	[225.0, [520.71, 2711.7]],
	[250.0, [535.35, 2716.5]],
	[275.0, [548.86, 2720.9]],
	[300.0, [561.43, 2724.9]],
	[325.0, [573.19, 2728.6]],
	[350.0, [584.26, 2732.0]],
	[375.0, [594.73, 2735.1]],
	[400.0, [604.66, 2738.1]],
	[450.0, [623.14, 2743.4]],
	[500.0, [640.09, 2748.1]],
	[550.0, [655.77, 2752.4]],
	[600.0, [670.38, 2756.2]],
	[650.0, [684.08, 2759.6]],
	[700.0, [697.00, 2762.8]],
	[750.0, [709.24, 2765.7]],
	[800.0, [720.87, 2768.3]],
	[850.0, [731.95, 2770.8]],
	[900.0, [742.56, 2773.0]],
	[950.0, [752.74, 2775.2]],
	[1000.0, [762.51, 2777.1]],
	[1100.0, [781.03, 2780.7]],
	[1200.0, [798.33, 2783.8]],
	[1300.0, [814.59, 2786.5]],
	[1400.0, [829.96, 2788.9]],
	[1500.0, [844.55, 2791.0]],
	[1750.0, [878.16, 2795.2]],
	[2000.0, [908.47, 2798.3]],
	[2250.0, [936.21, 2800.5]],
	[2500.0, [961.87, 2801.9]],
	[3000.0, [1008.3, 2803.2]],
	[3500.0, [1049.7, 2802.7]],
	[4000.0, [1087.4, 2800.8]],
	[5000.0, [1154.5, 2794.2]],
	[6000.0, [1213.8, 2784.6]],
	[7000.0, [1267.5, 2772.6]],
	[8000.0, [1317.1, 2758.7]],
	[9000.0, [1363.7, 2742.9]],
	[10000.0, [1407.8, 2725.5]],
	[11000.0, [1450.2, 2706.3]],
	[12000.0, [1491.3, 2685.4]],
	[13000.0, [1531.4, 2662.7]],
	[14000.0, [1571.0, 2637.9]],
	[15000.0, [1610.3, 2610.8]],
	[16000.0, [1649.9, 2581.0]],
	[17000.0, [1690.3, 2547.7]],
	[18000.0, [1732.2, 2510.0]],
	[19000.0, [1776.8, 2466.0]],
	[20000.0, [1826.6, 2412.1]],
	[21000.0, [1888.0, 2338.4]],
	[22000.0, [2011.1, 2172.6]],
	[22064.0, [2084.3, 2084.3]],

]);


const ps = new Map([
	[1.0, [0.1059, 8.9749]],
	[1.5, [0.1956, 8.8270]],
	[2.0, [0.2606, 8.7227]],
	[2.5, [0.3118, 8.6421]],
	[3.0, [0.3543, 8.5765]],
	[4.0, [0.4224, 8.4734]],
	[5.0, [0.4762, 8.3938]],
	[7.5, [0.5763, 8.2501]],
	[10.0, [0.6492, 8.1488]],
	[15.0, [0.7549, 8.0071]],
	[20.0, [0.8320, 7.9073]],
	[25.0, [0.8932, 7.8302]],
	[30.0, [0.9441, 7.7675]],
	[40.0, [1.0261, 7.6691]],
	[50.0, [1.0912, 7.5931]],
	[75.0, [1.2132, 7.4558]],
	[100.0, [1.3028, 7.3589]],
	[101.325, [1.3069, 7.3545]],
	[125.0, [1.3741, 7.2841]],
	[150.0, [1.4337, 7.2231]],
	[175.0, [1.4850, 7.1716]],
	[200.0, [1.5302, 7.1270]],
	[225.0, [1.5706, 7.0877]],
	[250.0, [1.6072, 7.0525]],
	[275.0, [1.6408, 7.0207]],
	[300.0, [1.6717, 6.9917]],
	[325.0, [1.7005, 6.9650]],
	[350.0, [1.7274, 6.9402]],
	[375.0, [1.7526, 6.9171]],
	[400.0, [1.7765, 6.8955]],
	[450.0, [1.8205, 6.8561]],
	[500.0, [1.8604, 6.8207]],
	[550.0, [1.8970, 6.7886]],
	[600.0, [1.9308, 6.7593]],
	[650.0, [1.9623, 6.7322]],
	[700.0, [1.9918, 6.7071]],
	[750.0, [2.0195, 6.6837]],
	[800.0, [2.0457, 6.6616]],
	[850.0, [2.0705, 6.6409]],
	[900.0, [2.0941, 6.6213]],
	[950.0, [2.1166, 6.6027]],
	[1000.0, [2.1381, 6.5850]],
	[1100.0, [2.1785, 6.5520]],
	[1200.0, [2.2159, 6.5217]],
	[1300.0, [2.2508, 6.4936]],
	[1400.0, [2.2835, 6.4675]],
	[1500.0, [2.3143, 6.4430]],
	[1750.0, [2.3844, 6.3877]],
	[2000.0, [2.4467, 6.3390]],
	[2250.0, [2.5029, 6.2954]],
	[2500.0, [2.5542, 6.2558]],
	[3000.0, [2.6454, 6.1856]],
	[3500.0, [2.7253, 6.1244]],
	[4000.0, [2.7966, 6.0696]],
	[5000.0, [2.9207, 5.9737]],
	[6000.0, [3.0275, 5.8902]],
	[7000.0, [3.1220, 5.8148]],
	[8000.0, [3.2077, 5.7450]],
	[9000.0, [3.2866, 5.6791]],
	[10000.0, [3.3603, 5.6159]],
	[11000.0, [3.4299, 5.5544]],
	[12000.0, [3.4964, 5.4939]],
	[13000.0, [3.5606, 5.4336]],
	[14000.0, [3.6232, 5.3728]],
	[15000.0, [3.6848, 5.3108]],
	[16000.0, [3.7461, 5.2466]],
	[17000.0, [3.8082, 5.1791]],
	[18000.0, [3.8720, 5.1064]],
	[19000.0, [3.9396, 5.0256]],
	[20000.0, [4.0146, 4.9310]],
	[21000.0, [4.1071, 4.8076]],
	[22000.0, [4.2942, 4.5439]],
	[22064.0, [4.4070, 4.4070]],

]);


//vf vg uf ufg down here 


const vu = [
	[0.001000, 206.00, 0.000, 2374.9],
	[0.001000, 147.03, 21.019, 2360.8],
	[0.001000, 106.32, 42.020, 2346.6],
	[0.001001, 77.885, 62.980, 2332.5],
	[0.001002, 57.762, 83.913, 2318.4],
	[0.001003, 43.340, 104.83, 2304.3],
	[0.001004, 32.879, 125.73, 2290.2],
	[0.001006, 25.205, 146.63, 2276.0],
	[0.001008, 19.515, 167.53, 2261.9],
	[0.001010, 15.251, 188.43, 2247.7],
	[0.001012, 12.026, 209.33, 2233.4],
	[0.001015, 9.5639, 230.24, 2219.1],
	[0.001017, 7.6670, 251.16, 2204.7],
	[0.001020, 6.1935, 272.09, 2190.3],
	[0.001023, 5.0396, 293.04, 2175.8],
	[0.001026, 4.1291, 313.99, 2161.3],
	[0.001029, 3.4053, 334.97, 2146.6],
	[0.001032, 2.8261, 355.96, 2131.9],
	[0.001036, 2.3593, 376.97, 2117.0],
	[0.001040, 1.9808, 398.00, 2102.0],
	[0.001043, 1.6720, 419.06, 2087.0],
	[0.001047, 1.4186, 440.15, 2071.8],
	[0.001052, 1.2094, 461.27, 2056.4],
	[0.001056, 1.0360, 482.42, 2040.9],
	[0.001060, 0.89133, 503.60, 2025.3],
	[0.001065, 0.77012, 524.83, 2009.5],
	[0.001070, 0.66808, 546.10, 1993.4],
	[0.001075, 0.58179, 567.41, 1977.3],
	[0.001080, 0.50850, 588.77, 1960.9],
	[0.001085, 0.44600, 610.19, 1944.2],
	[0.001091, 0.39248, 631.66, 1927.4],
	[0.001096, 0.34648, 653.19, 1910.3],
	[0.001102, 0.30680, 674.79, 1893.0],
	[0.001108, 0.27244, 696.46, 1875.4],
	[0.001114, 0.24260, 718.20, 1857.5],
	[0.001121, 0.21659, 740.02, 1839.4],
	[0.001127, 0.19384, 761.92, 1820.9],
	[0.001134, 0.17390, 783.91, 1802.1],
	[0.001141, 0.15636, 806.00, 1783.0],
	[0.001149, 0.14089, 828.18, 1763.6],
	[0.001157, 0.12721, 850.46, 1743.7],
	[0.001164, 0.11508, 872.86, 1723.5],
	[0.001173, 0.10429, 895.38, 1702.9],
	[0.001181, 0.094680, 918.02, 1681.9],
	[0.001190, 0.086094, 940.79, 1660.5],
	[0.001199, 0.078405, 963.70, 1638.6],
	[0.001209, 0.071505, 986.76, 1616.1],
	[0.001219, 0.065300, 1010.0, 1593.2],
	[0.001229, 0.059707, 1033.4, 1569.8],
	[0.001240, 0.054656, 1056.9, 1545.7],
	[0.001252, 0.050085, 1080.7, 1521.1],
	[0.001263, 0.045941, 1104.7, 1495.8],
	[0.001276, 0.042175, 1128.8, 1469.9],
	[0.001289, 0.038748, 1153.3, 1443.2],
	[0.001303, 0.035622, 1177.9, 1415.7],
	[0.001317, 0.032767, 1202.9, 1387.4],
	[0.001333, 0.030153, 1228.2, 1358.2],
	[0.001349, 0.027756, 1253.7, 1328.1],
	[0.001366, 0.025554, 1279.7, 1296.9],
	[0.001384, 0.023528, 1306.0, 1264.5],
	[0.001404, 0.021659, 1332.7, 1230.9],
	[0.001425, 0.019932, 1360.0, 1195.9],
	[0.001447, 0.018333, 1387.7, 1159.3],
	[0.001472, 0.016849, 1416.1, 1121.1],
	[0.001499, 0.015470, 1445.1, 1080.9],
	[0.001528, 0.014183, 1475.0, 1038.5],
	[0.001560, 0.012979, 1505.7, 993.5],
	[0.001597, 0.011848, 1537.5, 945.5],
	[0.001638, 0.010783, 1570.7, 893.8],
	[0.001685, 0.009772, 1605.5, 837.7],
	[0.001741, 0.008806, 1642.4, 775.9],
	[0.001808, 0.007872, 1682.2, 706.4],
	[0.001895, 0.006950, 1726.2, 625.7],
	[0.002015, 0.006009, 1777.2, 526.4],
	[0.002217, 0.004953, 1844.5, 385.6],
	[0.003106, 0.003106, 2015.7, 0],
];

const vs = [
	[0.001000, 206.00, 0.0000, 9.1556],
	[0.001000, 147.03, 0.0763, 8.9487],
	[0.001000, 106.32, 0.1511, 8.7488],
	[0.001001, 77.885, 0.2245, 8.5559],
	[0.001002, 57.762, 0.2965, 8.3696],
	[0.001003, 43.340, 0.3672, 8.1895],
	[0.001004, 32.879, 0.4368, 8.0152],
	[0.001006, 25.205, 0.5051, 7.8466],
	[0.001008, 19.515, 0.5724, 7.6832],
	[0.001010, 15.251, 0.6386, 7.5247],
	[0.001012, 12.026, 0.7038, 7.3710],
	[0.001015, 9.5639, 0.7680, 7.2218],
	[0.001017, 7.6670, 0.8313, 7.0769],
	[0.001020, 6.1935, 0.8937, 6.9360],
	[0.001023, 5.0396, 0.9551, 6.7989],
	[0.001026, 4.1291, 1.0158, 6.6655],
	[0.001029, 3.4053, 1.0756, 6.5355],
	[0.001032, 2.8261, 1.1346, 6.4089],
	[0.001036, 2.3593, 1.1929, 6.2853],
	[0.001040, 1.9808, 1.2504, 6.1647],
	[0.001043, 1.6720, 1.3072, 6.0470],
	[0.001047, 1.4186, 1.3634, 5.9319],
	[0.001052, 1.2094, 1.4188, 5.8193],
	[0.001056, 1.0360, 1.4737, 5.7092],
	[0.001060, 0.89133, 1.5279, 5.6013],
	[0.001065, 0.77012, 1.5816, 5.4956],
	[0.001070, 0.66808, 1.6346, 5.3919],
	[0.001075, 0.58179, 1.6872, 5.2901],
	[0.001080, 0.50850, 1.7392, 5.1901],
	[0.001085, 0.44600, 1.7908, 5.0919],
	[0.001091, 0.39248, 1.8418, 4.9953],
	[0.001096, 0.34648, 1.8924, 4.9002],
	[0.001102, 0.30680, 1.9426, 4.8066],
	[0.001108, 0.27244, 1.9923, 4.7143],
	[0.001114, 0.24260, 2.0417, 4.6233],
	[0.001121, 0.21659, 2.0906, 4.5335],
	[0.001127, 0.19384, 2.1392, 4.4448],
	[0.001134, 0.17390, 2.1875, 4.3572],
	[0.001141, 0.15636, 2.2355, 4.2705],
	[0.001149, 0.14089, 2.2831, 4.1847],
	[0.001157, 0.12721, 2.3305, 4.0997],
	[0.001164, 0.11508, 2.3776, 4.0154],
	[0.001173, 0.10429, 2.4245, 3.9318],
	[0.001181, 0.094680, 2.4712, 3.8489],
	[0.001190, 0.086094, 2.5176, 3.7664],
	[0.001199, 0.078405, 2.5639, 3.6844],
	[0.001209, 0.071505, 2.6100, 3.6028],
	[0.001219, 0.065300, 2.6560, 3.5216],
	[0.001229, 0.059707, 2.7018, 3.4405],
	[0.001240, 0.054656, 2.7476, 3.3596],
	[0.001252, 0.050085, 2.7933, 3.2788],
	[0.001263, 0.045941, 2.8390, 3.1979],
	[0.001276, 0.042175, 2.8847, 3.1169],
	[0.001289, 0.038748, 2.9304, 3.0358],
	[0.001303, 0.035622, 2.9762, 2.9542],
	[0.001317, 0.032767, 3.0221, 2.8723],
	[0.001333, 0.030153, 3.0681, 2.7898],
	[0.001349, 0.027756, 3.1144, 2.7066],
	[0.001366, 0.025554, 3.1608, 2.6225],
	[0.001384, 0.023528, 3.2076, 2.5374],
	[0.001404, 0.021659, 3.2548, 2.4511],
	[0.001425, 0.019932, 3.3024, 2.3633],
	[0.001447, 0.018333, 3.3506, 2.2737],
	[0.001472, 0.016849, 3.3994, 2.1821],
	[0.001499, 0.015470, 3.4491, 2.0881],
	[0.001528, 0.014183, 3.4998, 1.9911],
	[0.001560, 0.012979, 3.5516, 1.8906],
	[0.001597, 0.011848, 3.6050, 1.7857],
	[0.001638, 0.010783, 3.6602, 1.6756],
	[0.001685, 0.009772, 3.7179, 1.5585],
	[0.001741, 0.008806, 3.7788, 1.4326],
	[0.001808, 0.007872, 3.8442, 1.2942],
	[0.001895, 0.006950, 3.9165, 1.1373],
	[0.002015, 0.006009, 4.0004, 0.9489],
	[0.002217, 0.004953, 4.1119, 0.6890],
	[0.003106, 0.003106, 4.4070, 0],
];

const vh = [
	[0.001000, 206.00, 0.001, 2500.9],
	[0.001000, 147.03, 21.020, 2489.1],
	[0.001000, 106.32, 42.022, 2477.2],
	[0.001001, 77.885, 62.982, 2465.4],
	[0.001002, 57.762, 83.915, 2453.5],
	[0.001003, 43.340, 104.83, 2441.7],
	[0.001004, 32.879, 125.74, 2429.8],
	[0.001006, 25.205, 146.64, 2417.9],
	[0.001008, 19.515, 167.53, 2406.0],
	[0.001010, 15.251, 188.44, 2394.0],
	[0.001012, 12.026, 209.34, 2382.0],
	[0.001015, 9.5639, 230.26, 2369.8],
	[0.001017, 7.6670, 251.18, 2357.7],
	[0.001020, 6.1935, 272.12, 2345.4],
	[0.001023, 5.0396, 293.07, 2333.0],
	[0.001026, 4.1291, 314.03, 2320.6],
	[0.001029, 3.4053, 335.02, 2308.0],
	[0.001032, 2.8261, 356.02, 2295.3],
	[0.001036, 2.3593, 377.04, 2282.5],
	[0.001040, 1.9808, 398.09, 2269.6],
	[0.001043, 1.6720, 419.17, 2256.4],
	[0.001047, 1.4186, 440.28, 2243.1],
	[0.001052, 1.2094, 461.42, 2229.7],
	[0.001056, 1.0360, 482.59, 2216.0],
	[0.001060, 0.89133, 503.81, 2202.1],
	[0.001065, 0.77012, 525.07, 2188.1],
	[0.001070, 0.66808, 546.38, 2173.7],
	[0.001075, 0.58179, 567.75, 2159.1],
	[0.001080, 0.50850, 589.16, 2144.3],
	[0.001085, 0.44600, 610.64, 2129.2],
	[0.001091, 0.39248, 632.18, 2113.8],
	[0.001096, 0.34648, 653.79, 2098.0],
	[0.001102, 0.30680, 675.47, 2082.0],
	[0.001108, 0.27244, 697.24, 2065.6],
	[0.001114, 0.24260, 719.08, 2048.8],
	[0.001121, 0.21659, 741.02, 2031.7],
	[0.001127, 0.19384, 763.05, 2014.2],
	[0.001134, 0.17390, 785.19, 1996.2],
	[0.001141, 0.15636, 807.43, 1977.9],
	[0.001149, 0.14089, 829.78, 1959.0],
	[0.001157, 0.12721, 852.26, 1939.8],
	[0.001164, 0.11508, 874.87, 1920.0],
	[0.001173, 0.10429, 897.61, 1899.7],
	[0.001181, 0.094680, 920.50, 1878.8],
	[0.001190, 0.086094, 943.55, 1857.4],
	[0.001199, 0.078405, 966.76, 1835.4],
	[0.001209, 0.071505, 990.14, 1812.8],
	[0.001219, 0.065300, 1013.7, 1789.5],
	[0.001229, 0.059707, 1037.5, 1765.5],
	[0.001240, 0.054656, 1061.5, 1740.8],
	[0.001252, 0.050085, 1085.7, 1715.3],
	[0.001263, 0.045941, 1110.1, 1689.0],
	[0.001276, 0.042175, 1134.8, 1661.8],
	[0.001289, 0.038748, 1159.8, 1633.7],
	[0.001303, 0.035622, 1185.1, 1604.6],
	[0.001317, 0.032767, 1210.7, 1574.5],
	[0.001333, 0.030153, 1236.7, 1543.2],
	[0.001349, 0.027756, 1263.1, 1510.7],
	[0.001366, 0.025554, 1289.8, 1476.9],
	[0.001384, 0.023528, 1317.1, 1441.6],
	[0.001404, 0.021659, 1344.8, 1404.8],
	[0.001425, 0.019932, 1373.1, 1366.3],
	[0.001447, 0.018333, 1402.0, 1325.9],
	[0.001472, 0.016849, 1431.6, 1283.4],
	[0.001499, 0.015470, 1462.0, 1238.5],
	[0.001528, 0.014183, 1493.4, 1191.0],
	[0.001560, 0.012979, 1525.8, 1140.3],
	[0.001597, 0.011848, 1559.4, 1086.0],
	[0.001638, 0.010783, 1594.6, 1027.4],
	[0.001685, 0.009772, 1631.7, 963.4],
	[0.001741, 0.008806, 1671.2, 892.7],
	[0.001808, 0.007872, 1714.0, 812.9],
	[0.001895, 0.006950, 1761.5, 720.1],
	[0.002015, 0.006009, 1817.2, 605.5],
	[0.002217, 0.004953, 1891.2, 443.1],
	[0.003106, 0.003106, 2084.3, 0],
];

const uh = [
	[0.000, 2374.9, 0.001, 2500.9],
	[21.019, 2360.8, 21.020, 2489.1],
	[42.020, 2346.6, 42.022, 2477.2],
	[62.980, 2332.5, 62.982, 2465.4],
	[83.913, 2318.4, 83.915, 2453.5],
	[104.83, 2304.3, 104.83, 2441.7],
	[125.73, 2290.2, 125.74, 2429.8],
	[146.63, 2276.0, 146.64, 2417.9],
	[167.53, 2261.9, 167.53, 2406.0],
	[188.43, 2247.7, 188.44, 2394.0],
	[209.33, 2233.4, 209.34, 2382.0],
	[230.24, 2219.1, 230.26, 2369.8],
	[251.16, 2204.7, 251.18, 2357.7],
	[272.09, 2190.3, 272.12, 2345.4],
	[293.04, 2175.8, 293.07, 2333.0],
	[313.99, 2161.3, 314.03, 2320.6],
	[334.97, 2146.6, 335.02, 2308.0],
	[355.96, 2131.9, 356.02, 2295.3],
	[376.97, 2117.0, 377.04, 2282.5],
	[398.00, 2102.0, 398.09, 2269.6],
	[419.06, 2087.0, 419.17, 2256.4],
	[440.15, 2071.8, 440.28, 2243.1],
	[461.27, 2056.4, 461.42, 2229.7],
	[482.42, 2040.9, 482.59, 2216.0],
	[503.60, 2025.3, 503.81, 2202.1],
	[524.83, 2009.5, 525.07, 2188.1],
	[546.10, 1993.4, 546.38, 2173.7],
	[567.41, 1977.3, 567.75, 2159.1],
	[588.77, 1960.9, 589.16, 2144.3],
	[610.19, 1944.2, 610.64, 2129.2],
	[631.66, 1927.4, 632.18, 2113.8],
	[653.19, 1910.3, 653.79, 2098.0],
	[674.79, 1893.0, 675.47, 2082.0],
	[696.46, 1875.4, 697.24, 2065.6],
	[718.20, 1857.5, 719.08, 2048.8],
	[740.02, 1839.4, 741.02, 2031.7],
	[761.92, 1820.9, 763.05, 2014.2],
	[783.91, 1802.1, 785.19, 1996.2],
	[806.00, 1783.0, 807.43, 1977.9],
	[828.18, 1763.6, 829.78, 1959.0],
	[850.46, 1743.7, 852.26, 1939.8],
	[872.86, 1723.5, 874.87, 1920.0],
	[895.38, 1702.9, 897.61, 1899.7],
	[918.02, 1681.9, 920.50, 1878.8],
	[940.79, 1660.5, 943.55, 1857.4],
	[963.70, 1638.6, 966.76, 1835.4],
	[986.76, 1616.1, 990.14, 1812.8],
	[1010.0, 1593.2, 1013.7, 1789.5],
	[1033.4, 1569.8, 1037.5, 1765.5],
	[1056.9, 1545.7, 1061.5, 1740.8],
	[1080.7, 1521.1, 1085.7, 1715.3],
	[1104.7, 1495.8, 1110.1, 1689.0],
	[1128.8, 1469.9, 1134.8, 1661.8],
	[1153.3, 1443.2, 1159.8, 1633.7],
	[1177.9, 1415.7, 1185.1, 1604.6],
	[1202.9, 1387.4, 1210.7, 1574.5],
	[1228.2, 1358.2, 1236.7, 1543.2],
	[1253.7, 1328.1, 1263.1, 1510.7],
	[1279.7, 1296.9, 1289.8, 1476.9],
	[1306.0, 1264.5, 1317.1, 1441.6],
	[1332.7, 1230.9, 1344.8, 1404.8],
	[1360.0, 1195.9, 1373.1, 1366.3],
	[1387.7, 1159.3, 1402.0, 1325.9],
	[1416.1, 1121.1, 1431.6, 1283.4],
	[1445.1, 1080.9, 1462.0, 1238.5],
	[1475.0, 1038.5, 1493.4, 1191.0],
	[1505.7, 993.5, 1525.8, 1140.3],
	[1537.5, 945.5, 1559.4, 1086.0],
	[1570.7, 893.8, 1594.6, 1027.4],
	[1605.5, 837.7, 1631.7, 963.4],
	[1642.4, 775.9, 1671.2, 892.7],
	[1682.2, 706.4, 1714.0, 812.9],
	[1726.2, 625.7, 1761.5, 720.1],
	[1777.2, 526.4, 1817.2, 605.5],
	[1844.5, 385.6, 1891.2, 443.1],
	[2015.7, 0, 2084.3, 0],

];

const us = [
	[0.000, 2374.9, 0.0000, 9.1556],
	[21.019, 2360.8, 0.0763, 8.9487],
	[42.020, 2346.6, 0.1511, 8.7488],
	[62.980, 2332.5, 0.2245, 8.5559],
	[83.913, 2318.4, 0.2965, 8.3696],
	[104.83, 2304.3, 0.3672, 8.1895],
	[125.73, 2290.2, 0.4368, 8.0152],
	[146.63, 2276.0, 0.5051, 7.8466],
	[167.53, 2261.9, 0.5724, 7.6832],
	[188.43, 2247.7, 0.6386, 7.5247],
	[209.33, 2233.4, 0.7038, 7.3710],
	[230.24, 2219.1, 0.7680, 7.2218],
	[251.16, 2204.7, 0.8313, 7.0769],
	[272.09, 2190.3, 0.8937, 6.9360],
	[293.04, 2175.8, 0.9551, 6.7989],
	[313.99, 2161.3, 1.0158, 6.6655],
	[334.97, 2146.6, 1.0756, 6.5355],
	[355.96, 2131.9, 1.1346, 6.4089],
	[376.97, 2117.0, 1.1929, 6.2853],
	[398.00, 2102.0, 1.2504, 6.1647],
	[419.06, 2087.0, 1.3072, 6.0470],
	[440.15, 2071.8, 1.3634, 5.9319],
	[461.27, 2056.4, 1.4188, 5.8193],
	[482.42, 2040.9, 1.4737, 5.7092],
	[503.60, 2025.3, 1.5279, 5.6013],
	[524.83, 2009.5, 1.5816, 5.4956],
	[546.10, 1993.4, 1.6346, 5.3919],
	[567.41, 1977.3, 1.6872, 5.2901],
	[588.77, 1960.9, 1.7392, 5.1901],
	[610.19, 1944.2, 1.7908, 5.0919],
	[631.66, 1927.4, 1.8418, 4.9953],
	[653.19, 1910.3, 1.8924, 4.9002],
	[674.79, 1893.0, 1.9426, 4.8066],
	[696.46, 1875.4, 1.9923, 4.7143],
	[718.20, 1857.5, 2.0417, 4.6233],
	[740.02, 1839.4, 2.0906, 4.5335],
	[761.92, 1820.9, 2.1392, 4.4448],
	[783.91, 1802.1, 2.1875, 4.3572],
	[806.00, 1783.0, 2.2355, 4.2705],
	[828.18, 1763.6, 2.2831, 4.1847],
	[850.46, 1743.7, 2.3305, 4.0997],
	[872.86, 1723.5, 2.3776, 4.0154],
	[895.38, 1702.9, 2.4245, 3.9318],
	[918.02, 1681.9, 2.4712, 3.8489],
	[940.79, 1660.5, 2.5176, 3.7664],
	[963.70, 1638.6, 2.5639, 3.6844],
	[986.76, 1616.1, 2.6100, 3.6028],
	[1010.0, 1593.2, 2.6560, 3.5216],
	[1033.4, 1569.8, 2.7018, 3.4405],
	[1056.9, 1545.7, 2.7476, 3.3596],
	[1080.7, 1521.1, 2.7933, 3.2788],
	[1104.7, 1495.8, 2.8390, 3.1979],
	[1128.8, 1469.9, 2.8847, 3.1169],
	[1153.3, 1443.2, 2.9304, 3.0358],
	[1177.9, 1415.7, 2.9762, 2.9542],
	[1202.9, 1387.4, 3.0221, 2.8723],
	[1228.2, 1358.2, 3.0681, 2.7898],
	[1253.7, 1328.1, 3.1144, 2.7066],
	[1279.7, 1296.9, 3.1608, 2.6225],
	[1306.0, 1264.5, 3.2076, 2.5374],
	[1332.7, 1230.9, 3.2548, 2.4511],
	[1360.0, 1195.9, 3.3024, 2.3633],
	[1387.7, 1159.3, 3.3506, 2.2737],
	[1416.1, 1121.1, 3.3994, 2.1821],
	[1445.1, 1080.9, 3.4491, 2.0881],
	[1475.0, 1038.5, 3.4998, 1.9911],
	[1505.7, 993.5, 3.5516, 1.8906],
	[1537.5, 945.5, 3.6050, 1.7857],
	[1570.7, 893.8, 3.6602, 1.6756],
	[1605.5, 837.7, 3.7179, 1.5585],
	[1642.4, 775.9, 3.7788, 1.4326],
	[1682.2, 706.4, 3.8442, 1.2942],
	[1726.2, 625.7, 3.9165, 1.1373],
	[1777.2, 526.4, 4.0004, 0.9489],
	[1844.5, 385.6, 4.1119, 0.6890],
	[2015.7, 0, 4.4070, 0],
];

const hs = [
	[0.001, 2500.9, 0.0000, 9.1556],
	[21.020, 2489.1, 0.0763, 8.9487],
	[42.022, 2477.2, 0.1511, 8.7488],
	[62.982, 2465.4, 0.2245, 8.5559],
	[83.915, 2453.5, 0.2965, 8.3696],
	[104.83, 2441.7, 0.3672, 8.1895],
	[125.74, 2429.8, 0.4368, 8.0152],
	[146.64, 2417.9, 0.5051, 7.8466],
	[167.53, 2406.0, 0.5724, 7.6832],
	[188.44, 2394.0, 0.6386, 7.5247],
	[209.34, 2382.0, 0.7038, 7.3710],
	[230.26, 2369.8, 0.7680, 7.2218],
	[251.18, 2357.7, 0.8313, 7.0769],
	[272.12, 2345.4, 0.8937, 6.9360],
	[293.07, 2333.0, 0.9551, 6.7989],
	[314.03, 2320.6, 1.0158, 6.6655],
	[335.02, 2308.0, 1.0756, 6.5355],
	[356.02, 2295.3, 1.1346, 6.4089],
	[377.04, 2282.5, 1.1929, 6.2853],
	[398.09, 2269.6, 1.2504, 6.1647],
	[419.17, 2256.4, 1.3072, 6.0470],
	[440.28, 2243.1, 1.3634, 5.9319],
	[461.42, 2229.7, 1.4188, 5.8193],
	[482.59, 2216.0, 1.4737, 5.7092],
	[503.81, 2202.1, 1.5279, 5.6013],
	[525.07, 2188.1, 1.5816, 5.4956],
	[546.38, 2173.7, 1.6346, 5.3919],
	[567.75, 2159.1, 1.6872, 5.2901],
	[589.16, 2144.3, 1.7392, 5.1901],
	[610.64, 2129.2, 1.7908, 5.0919],
	[632.18, 2113.8, 1.8418, 4.9953],
	[653.79, 2098.0, 1.8924, 4.9002],
	[675.47, 2082.0, 1.9426, 4.8066],
	[697.24, 2065.6, 1.9923, 4.7143],
	[719.08, 2048.8, 2.0417, 4.6233],
	[741.02, 2031.7, 2.0906, 4.5335],
	[763.05, 2014.2, 2.1392, 4.4448],
	[785.19, 1996.2, 2.1875, 4.3572],
	[807.43, 1977.9, 2.2355, 4.2705],
	[829.78, 1959.0, 2.2831, 4.1847],
	[852.26, 1939.8, 2.3305, 4.0997],
	[874.87, 1920.0, 2.3776, 4.0154],
	[897.61, 1899.7, 2.4245, 3.9318],
	[920.50, 1878.8, 2.4712, 3.8489],
	[943.55, 1857.4, 2.5176, 3.7664],
	[966.76, 1835.4, 2.5639, 3.6844],
	[990.14, 1812.8, 2.6100, 3.6028],
	[1013.7, 1789.5, 2.6560, 3.5216],
	[1037.5, 1765.5, 2.7018, 3.4405],
	[1061.5, 1740.8, 2.7476, 3.3596],
	[1085.7, 1715.3, 2.7933, 3.2788],
	[1110.1, 1689.0, 2.8390, 3.1979],
	[1134.8, 1661.8, 2.8847, 3.1169],
	[1159.8, 1633.7, 2.9304, 3.0358],
	[1185.1, 1604.6, 2.9762, 2.9542],
	[1210.7, 1574.5, 3.0221, 2.8723],
	[1236.7, 1543.2, 3.0681, 2.7898],
	[1263.1, 1510.7, 3.1144, 2.7066],
	[1289.8, 1476.9, 3.1608, 2.6225],
	[1317.1, 1441.6, 3.2076, 2.5374],
	[1344.8, 1404.8, 3.2548, 2.4511],
	[1373.1, 1366.3, 3.3024, 2.3633],
	[1402.0, 1325.9, 3.3506, 2.2737],
	[1431.6, 1283.4, 3.3994, 2.1821],
	[1462.0, 1238.5, 3.4491, 2.0881],
	[1493.4, 1191.0, 3.4998, 1.9911],
	[1525.8, 1140.3, 3.5516, 1.8906],
	[1559.4, 1086.0, 3.6050, 1.7857],
	[1594.6, 1027.4, 3.6602, 1.6756],
	[1631.7, 963.4, 3.7179, 1.5585],
	[1671.2, 892.7, 3.7788, 1.4326],
	[1714.0, 812.9, 3.8442, 1.2942],
	[1761.5, 720.1, 3.9165, 1.1373],
	[1817.2, 605.5, 4.0004, 0.9489],
	[1891.2, 443.1, 4.1119, 0.6890],
	[2084.3, 0, 4.4070, 0],
];


const p = document.getElementById('p');
const t = document.getElementById('t');
const v = document.getElementById('v');
const u = document.getElementById('u');
const h = document.getElementById('h');
const s = document.getElementById('s');
const p2 = document.getElementById('p2');
const t2 = document.getElementById('t2');
const v2 = document.getElementById('v2');
const u2 = document.getElementById('u2');
const h2 = document.getElementById('h2');
const s2 = document.getElementById('s2');
const put1 = document.getElementById('input1');
const put2 = document.getElementById('input2');
// const input1=put1.value;
// const input2=put2.value;

//dont declare the value variables
//access them by their full name


const ii = document.getElementById('click');
const btn = ii.addEventListener('click', check);


function check() {
	let element = document.getElementById('data');
	// console.log('clicked');
	if (put1.value == 0 || put2.value == 0)
	{
		alert("Enter the fields properly");
		element.innerText = ('Enter the specific fields');
	}

	else if ((p.checked==true && put1.value>22064)||(p2.checked==true && put2.value>22064)||(t.checked==true && put1.value>373)||(t2.checked==true && put2.value>373)||
				(t.checked==true && put1.value<0.01)||(t2.checked==true && put2.value<0.01)||(p.checked==true && put1.value<1)||(p2.checked==true && put2.value<1))
		alert("Enter the fields values that lie within the range of the tables provided by Cengel and Boles");


	else if (t.checked == true && p2.checked == true) {
		//put1.value holds the temperature 
		//put2.value holds the pressure
		let pressure = 0;
		if (tp.has(put1.value) == true)
			pressure = tp.get(put1.value);
		else
			pressure = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), tp.get(getLowerTemp(put1.value)), tp.get(getUpperTemp(put1.value)));
		console.log(pressure);
		if (put2.value > pressure)
			element.innerText = ('Compressed water zone');
		else if (put2.value < pressure)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ("Two phase zone");
	}

	//inputs of temperature and pressure has been done


	else if (t.checked == true && v2.checked == true) {
		//put1.value holds temperature
		//put2.value holds s volume
		let vf = 0, vg = 0;
		//console.log((put1.value));
		if (tv.has(put1.value) == true) {
			vf = tv.get(put1.value)[0];
			vg = tv.get(put1.value)[1];
		}
		else {
			vf = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), tv.get(getLowerTemp(put1.value))[0], tv.get(getUpperTemp(put1.value))[0]);
			vg = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), tv.get(getLowerTemp(put1.value))[1], tv.get(getUpperTemp(put1.value))[1]);
		}
		// console.log(vg);
		if (put2.value <= vf)
			element.innerText = ('Compressed water zone');
		else if (put2.value >= vg)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ('Two phase zone');

	}

	else if (v.checked == true && t2.checked == true) {
		let vf = 0, vg = 0;
		//console.log((put1.value));
		if (tv.has(put2.value) == true) {
			vf = tv.get(put2.value)[0];
			vg = tv.get(put2.value)[1];
		}
		else {
			vf = interpolate(put2.value, getLowerTemp(put2.value), getUpperTemp(put2.value), tv.get(getLowerTemp(put2.value))[0], tv.get(getUpperTemp(put2.value))[0]);
			vg = interpolate(put2.value, getLowerTemp(put2.value), getUpperTemp(put2.value), tv.get(getLowerTemp(put2.value))[1], tv.get(getUpperTemp(put2.value))[1]);
		}
		// console.log(vg);
		if (put1.value <= vf)
			element.innerText = ('Compressed water zone');
		else if (put1.value >= vg)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ('Two phase zone');
	}


	else if (t.checked == true && u2.checked == true) {
		//put1.value holds temperature 
		//put2.value holds s energy
		let uf = 0, ug = 0;
		if (tu.has(put1.value) == true) {
			uf = tu.get(put1.value)[0];
			ug = tu.get(put1.value)[1];
		}
		else {
			uf = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), tu.get(getLowerTemp(put1.value))[0], tu.get(getUpperTemp(put1.value))[0]);
			ug = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), tu.get(getLowerTemp(put1.value))[1], tu.get(getUpperTemp(put1.value))[1]);
		}
		// console.log(ug);

		if (put2.value <= uf)
			element.innerText = ('Compressed water zone');
		else if (put2.value >= ug)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ('Two phase zone');

	}


	else if (u.checked == true && t2.checked == true) {
		let uf = 0, ug = 0;
		if (tu.has(put2.value) == true) {
			uf = tu.get(put2.value)[0];
			ug = tu.get(put2.value)[1];
		}
		else {
			uf = interpolate(put2.value, getLowerTemp(put2.value), getUpperTemp(put2.value), tu.get(getLowerTemp(put2.value))[0], tu.get(getUpperTemp(put2.value))[0]);
			ug = interpolate(put2.value, getLowerTemp(put2.value), getUpperTemp(put2.value), tu.get(getLowerTemp(put2.value))[1], tu.get(getUpperTemp(put2.value))[1]);
		}
		// console.log(ug);

		if (put1.value <= uf)
			element.innerText = ('Compressed water zone');
		else if (put1.value >= ug)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ('Two phase zone');
	}
	//temperature and internal enrgy plots done 

	else if (t.checked == true && h2.checked == true) {
		//put1.value holds temperature 
		//put2.value holds s energy
		let hf = 0, hg = 0;
		if (th.has(put1.value) == true) {
			hf = th.get(put1.value)[0];
			hg = th.get(put1.value)[1];
		}
		else {
			hf = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), th.get(getLowerTemp(put1.value))[0], th.get(getUpperTemp(put1.value))[0]);
			hg = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), th.get(getLowerTemp(put1.value))[1], th.get(getUpperTemp(put1.value))[1]);
		}
		// console.log(hg);

		if (put2.value <= hf)
			element.innerText = ('Compressed water zone');
		else if (put2.value >= hg)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ('Two phase zone');

	}

	else if (h.checked == true && t2.checked == true) {
		let hf = 0, hg = 0;
		if (th.has(put2.value) == true) {
			hf = th.get(put2.value)[0];
			hg = th.get(put2.value)[1];
		}
		else {
			hf = interpolate(put2.value, getLowerTemp(put2.value), getUpperTemp(put2.value), th.get(getLowerTemp(put2.value))[0], th.get(getUpperTemp(put2.value))[0]);
			hg = interpolate(put2.value, getLowerTemp(put2.value), getUpperTemp(put2.value), th.get(getLowerTemp(put2.value))[1], th.get(getUpperTemp(put2.value))[1]);
		}
		// console.log(hg);

		if (put1.value <= hf)
			element.innerText = ('Compressed water zone');
		else if (put1.value >= hg)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ('Two phase zone');
	}

	else if (t.checked == true && s2.checked == true) {
		//put1.value holds temperature 
		//put2.value holds s energy
		let sf = 0, sg = 0;
		if (ts.has(put1.value) == true) {
			sf = tu.get(put1.value)[0];
			sg = tu.get(put1.value)[1];
		}
		else {
			sf = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), ts.get(getLowerTemp(put1.value))[0], ts.get(getUpperTemp(put1.value))[0]);
			sg = interpolate(put1.value, getLowerTemp(put1.value), getUpperTemp(put1.value), ts.get(getLowerTemp(put1.value))[1], ts.get(getUpperTemp(put1.value))[1]);
		}
		// console.log(sg);

		if (put2.value <= sf)
			element.innerText = ('Compressed water zone');
		else if (put2.value >= sg)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ('Two phase zone');

	}

	else if (s.checked == true && t2.checked == true) {
		let sf = 0, sg = 0;
		if (ts.has(put2.value) == true) {
			sf = tu.get(put2.value)[0];
			sg = tu.get(put2.value)[1];
		}
		else {
			sf = interpolate(put2.value, getLowerTemp(put1.value), getUpperTemp(put2.value), ts.get(getLowerTemp(put2.value))[0], ts.get(getUpperTemp(put2.value))[0]);
			sg = interpolate(put2.value, getLowerTemp(put1.value), getUpperTemp(put2.value), ts.get(getLowerTemp(put2.value))[1], ts.get(getUpperTemp(put2.value))[1]);
		}
		// console.log(sg);

		if (put1.value <= sf)
			element.innerText = ('Compressed water zone');
		else if (put1.value >= sg)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ('Two phase zone');
	}

	//all plots of temperature are done 

	else if (t2.checked == true && p.checked == true) {
		//put1.value holds the temperature 
		//put2.value holds the pressure
		let pressure = 0;
		if (tp.has(put2.value) == true)
			pressure = tp.get(put2.value);
		else
			pressure = interpolate(put2.value, getLowerTemp(put2.value), getUpperTemp(put2.value), tp.get(getLowerTemp(put2.value)), tp.get(getUpperTemp(put2.value)));
		//console.log(pressure);
		if (put1.value > pressure)
			element.innerText = ('Compressed water zone');
		else if (put1.value < pressure)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ("Two phase zone");
	}

	//pressure vs temperature plots have been dealt with

	else if (p.checked == true && v2.checked == true) {
		//put1.value holds pressure
		//put2.value holds s volume
		let vf = 0, vg = 0;
		// console.log(getLowerPressure(put1.value));
		// console.log(getUpperPressure(put1.value));
		if (pv.has(put1.value) == true) {
			// console.log('hello');
			vf = pv.get(put1.value)[0];
			vg = pv.get(put1.value)[1];
		}
		else {
			vf = interpolate(put1.value, getLowerPressure(put1.value), getUpperPressure(put1.value), pv.get(getLowerPressure(put1.value))[0], pv.get(getUpperPressure(put1.value))[0]);
			vg = interpolate(put1.value, getLowerPressure(put1.value), getUpperPressure(put1.value), pv.get(getLowerPressure(put1.value))[1], pv.get(getUpperPressure(put1.value))[1]);
		}
		// console.log(vg);
		if (put2.value <= vf)
			element.innerText = ('Compressed water zone');
		else if (put2.value >= vg)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ('Two phase zone');
	}


	else if (p2.checked == true && v.checked == true) {
		let vf = 0, vg = 0;
		// console.log(getLowerPressure(put1.value));
		// console.log(getUpperPressure(put1.value));
		if (pv.has(put2.value) == true) {
			// console.log('hello');
			vf = pv.get(put2.value)[0];
			vg = pv.get(put2.value)[1];
		}
		else {
			vf = interpolate(put2.value, getLowerPressure(put2.value), getUpperPressure(put2.value), pv.get(getLowerPressure(put2.value))[0], pv.get(getUpperPressure(put2.value))[0]);
			vg = interpolate(put2.value, getLowerPressure(put2.value), getUpperPressure(put2.value), pv.get(getLowerPressure(put2.value))[1], pv.get(getUpperPressure(put2.value))[1]);
		}
		// console.log(vg);
		if (put1.value <= vf)
			element.innerText = ('Compressed water zone');
		else if (put1.value >= vg)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ('Two phase zone');
	}

	else if (p.checked == true && u2.checked == true) {
		//put1.value holds pressure
		//put2.value holds s volume
		let uf = 0, ug = 0;
		// console.log(getLowerPressure(put1.value));
		// console.log(getUpperPressure(put1.value));
		if (pu.has(put1.value) == true) {
			// console.log('hello');
			uf = pu.get(put1.value)[0];
			ug = pu.get(put1.value)[1];
		}
		else {
			uf = interpolate(put1.value, getLowerPressure(put1.value), getUpperPressure(put1.value), pu.get(getLowerPressure(put1.value))[0], pu.get(getUpperPressure(put1.value))[0]);
			ug = interpolate(put1.value, getLowerPressure(put1.value), getUpperPressure(put1.value), pu.get(getLowerPressure(put1.value))[1], pu.get(getUpperPressure(put1.value))[1]);
		}
		// console.log(ug);
		if (put2.value <= uf)
			element.innerText = ('Compressed water zone');
		else if (put2.value >= ug)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ('Two phase zone');
	}


	else if (p2.checked == true && u.checked == true) {
		let uf = 0, ug = 0;
		// console.log(getLowerPressure(put1.value));
		// console.log(getUpperPressure(put1.value));
		if (pu.has(put2.value) == true) {
			// console.log('hello');
			uf = pu.get(put2.value)[0];
			ug = pu.get(put2.value)[1];
		}
		else {
			uf = interpolate(put2.value, getLowerPressure(put2.value), getUpperPressure(put2.value), pu.get(getLowerPressure(put2.value))[0], pu.get(getUpperPressure(put2.value))[0]);
			ug = interpolate(put2.value, getLowerPressure(put2.value), getUpperPressure(put2.value), pu.get(getLowerPressure(put2.value))[1], pu.get(getUpperPressure(put2.value))[1]);
		}
		// console.log(ug);
		if (put1.value <= uf)
			element.innerText = ('Compressed water zone');
		else if (put1.value >= ug)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ('Two phase zone');
	}
	//p vs u done and handled

	else if (p.checked == true && h2.checked == true) {
		//put1.value holds pressure
		//put2.value holds s volume
		let hf = 0, hg = 0;
		// console.log(getLowerPressure(put1.value));
		// console.log(getUpperPressure(put1.value));
		if (ph.has(put1.value) == true) {
			// console.log('hello');
			hf = ph.get(put1.value)[0];
			hg = ph.get(put1.value)[1];
		}
		else {
			hf = interpolate(put1.value, getLowerPressure(put1.value), getUpperPressure(put1.value), ph.get(getLowerPressure(put1.value))[0], ph.get(getUpperPressure(put1.value))[0]);
			hg = interpolate(put1.value, getLowerPressure(put1.value), getUpperPressure(put1.value), ph.get(getLowerPressure(put1.value))[1], ph.get(getUpperPressure(put1.value))[1]);
		}
		// console.log(hg);
		if (put2.value <= hf)
			element.innerText = ('Compressed water zone');
		else if (put2.value >= hg)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ('Two phase zone');
	}


	else if (p2.checked == true && h.checked == true) {
		let hf = 0, hg = 0;
		// console.log(getLowerPressure(put1.value));
		// console.log(getUpperPressure(put1.value));
		if (ph.has(put2.value) == true) {
			// console.log('hello');
			hf = ph.get(put2.value)[0];
			hg = ph.get(put2.value)[1];
		}
		else {
			hf = interpolate(put2.value, getLowerPressure(put2.value), getUpperPressure(put2.value), ph.get(getLowerPressure(put2.value))[0], ph.get(getUpperPressure(put2.value))[0]);
			hg = interpolate(put2.value, getLowerPressure(put2.value), getUpperPressure(put2.value), ph.get(getLowerPressure(put2.value))[1], ph.get(getUpperPressure(put2.value))[1]);
		}
		// console.log(hg);
		if (put1.value <= hf)
			element.innerText = ('Compressed water zone');
		else if (put1.value >= hg)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ('Two phase zone');
	}

	//p vs h handled


	else if (p.checked == true && s2.checked == true) {
		//put1.value holds pressure
		//put2.value holds s volume
		let sf = 0, sg = 0;
		// console.log(getLowerPressure(put1.value));
		// console.log(getUpperPressure(put1.value));
		if (ps.has(put1.value) == true) {
			// console.log('hello');
			sf = ps.get(put1.value)[0];
			sg = ps.get(put1.value)[1];
		}
		else {
			sf = interpolate(put1.value, getLowerPressure(put1.value), getUpperPressure(put1.value), ps.get(getLowerPressure(put1.value))[0], ps.get(getUpperPressure(put1.value))[0]);
			sg = interpolate(put1.value, getLowerPressure(put1.value), getUpperPressure(put1.value), ps.get(getLowerPressure(put1.value))[1], ps.get(getUpperPressure(put1.value))[1]);
		}
		// console.log(sg);
		if (put2.value <= sf)
			element.innerText = ('Compressed water zone');
		else if (put2.value >= sg)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ('Two phase zone');
	}


	else if (p2.checked == true && s.checked == true) {
		let sf = 0, sg = 0;
		// console.log(getLowerPressure(put1.value));
		// console.log(getUpperPressure(put1.value));
		if (ps.has(put2.value) == true) {
			// console.log('hello');
			sf = ps.get(put2.value)[0];
			sg = ps.get(put2.value)[1];
		}
		else {
			sf = interpolate(put2.value, getLowerPressure(put2.value), getUpperPressure(put2.value), ps.get(getLowerPressure(put2.value))[0], ps.get(getUpperPressure(put2.value))[0]);
			sg = interpolate(put2.value, getLowerPressure(put2.value), getUpperPressure(put2.value), ps.get(getLowerPressure(put2.value))[1], ps.get(getUpperPressure(put2.value))[1]);
		}
		// console.log(sg);
		if (put1.value <= sf)
			element.innerText = ('Compressed water zone');
		else if (put1.value >= sg)
			element.innerText = ('Superheated zone');
		else
			element.innerText = ('Two phase zone');
	}

	//pressure vs s plots handled;


	else if (v.checked == true && u2.checked == true) {
		//put1.value holds v and put2.value holds u
		let c = false; let flag = 10000;
		let lquality1 = 0, lquality2 = 0;
		for (let i = 0; i < vu.length; i++) {
			let quality1 = (put1.value - vu[i][0]) / (vu[i][1] - vu[i][0]);
			let quality2 = (put2.value - vu[i][2]) / vu[i][3];
			let diff = quality1 - quality2;
			if (diff == 0)
				c = true;           //well within the two phase zone if c == true
			if (c == true)
				break;
			if (flag > (Math.abs(quality1 - quality2))) {
				flag = Math.abs(quality1 - quality2);
				lquality1 = quality1;
				lquality2 = quality2;
			}
		}
		if (c == true)
			element.innerText = ('Two phase zone');
		else if (lquality2 - lquality1 == flag)
			element.innerText = ("Compressed water zone");
		else
			element.innerText = ('Superheated zone');
	}


	else if (v2.checked == true && u.checked == true) {
		let c = false; let flag = 10000;
		let lquality1 = 0, lquality2 = 0;
		for (let i = 0; i < vu.length; i++) {
			let quality1 = (put2.value - vu[i][0]) / (vu[i][1] - vu[i][0]);
			let quality2 = (put1.value - vu[i][2]) / vu[i][3];
			let diff = quality1 - quality2;
			if (diff == 0)
				c = true;           //well within the two phase zone if c == true
			if (c == true)
				break;
			if (flag > (Math.abs(quality1 - quality2))) {
				flag = Math.abs(quality1 - quality2);
				lquality1 = quality1;
				lquality2 = quality2;
			}
		}
		if (c == true)
			element.innerText = ('Two phase zone');
		else if (lquality2 - lquality1 == flag)
			element.innerText = ("Compressed water zone");
		else
			element.innerText = ('Superheated zone');
	}
	//vu done

	else if (v.checked == true && h2.checked == true) {
		//put1.value holds v and put2.value holds u
		let c = false; let flag = 10000;
		let lquality1 = 0, lquality2 = 0;
		for (let i = 0; i < vh.length; i++) {
			let quality1 = (put1.value - vh[i][0]) / (vh[i][1] - vh[i][0]);
			let quality2 = (put2.value - vh[i][2]) / vh[i][3];
			let diff = quality1 - quality2;
			if (diff == 0)
				c = true;           //well within the two phase zone if c == true
			if (c == true)
				break;
			if (flag > (Math.abs(quality1 - quality2))) {
				flag = Math.abs(quality1 - quality2);
				lquality1 = quality1;
				lquality2 = quality2;
			}
		}
		if (c == true)
			element.innerText = ('Two phase zone');
		else if (lquality2 - lquality1 == flag)
			element.innerText = ("Compressed water zone");
		else
			element.innerText = ('Superheated zone');
	}


	else if (v2.checked == true && h.checked == true) {
		let c = false; let flag = 10000;
		let lquality1 = 0, lquality2 = 0;
		for (let i = 0; i < vh.length; i++) {
			let quality1 = (put2.value - vh[i][0]) / (vh[i][1] - vh[i][0]);
			let quality2 = (put1.value - vh[i][2]) / vh[i][3];
			let diff = quality1 - quality2;
			if (diff == 0)
				c = true;           //well within the two phase zone if c == true
			if (c == true)
				break;
			if (flag > (Math.abs(quality1 - quality2))) {
				flag = Math.abs(quality1 - quality2);
				lquality1 = quality1;
				lquality2 = quality2;
			}
		}
		if (c == true)
		element.innerText=('Two phase zone');
		else if (lquality2 - lquality1 == flag)
		element.innerText=("Compressed water zone");
		else
		element.innerText=('Superheated zone');
	}

	//vh done

	else if (v.checked == true && s2.checked == true) {
		//put1.value holds v and put2.value holds u
		let c = false; let flag = 10000;
		let lquality1 = 0, lquality2 = 0;
		for (let i = 0; i < vs.length; i++) {
			let quality1 = (put1.value - vs[i][0]) / (vs[i][1] - vs[i][0]);
			let quality2 = (put2.value - vs[i][2]) / vs[i][3];
			let diff = quality1 - quality2;
			if (diff == 0)
				c = true;           //well within the two phase zone if c == true
			if (c == true)
				break;
			if (flag > (Math.abs(quality1 - quality2))) {
				flag = Math.abs(quality1 - quality2);
				lquality1 = quality1;
				lquality2 = quality2;
			}
		}
		if (c == true)
		element.innerText=('Two phase zone');
		else if (lquality2 - lquality1 == flag)
		element.innerText=("Compressed water zone");
		else
		element.innerText=('Superheated zone');
	}


	else if (v2.checked == true && s.checked == true) {
		let c = false; let flag = 10000;
		let lquality1 = 0, lquality2 = 0;
		for (let i = 0; i < vs.length; i++) {
			let quality1 = (put2.value - vs[i][0]) / (vs[i][1] - vs[i][0]);
			let quality2 = (put1.value - vs[i][2]) / vs[i][3];
			let diff = quality1 - quality2;
			if (diff == 0)
				c = true;           //well within the two phase zone if c == true
			if (c == true)
				break;
			if (flag > (Math.abs(quality1 - quality2))) {
				flag = Math.abs(quality1 - quality2);
				lquality1 = quality1;
				lquality2 = quality2;
			}
		}
		if (c == true)
		element.innerText=('Two phase zone');
		else if (lquality2 - lquality1 == flag)
		element.innerText=("Compressed water zone");
		else
		element.innerText=('Superheated zone');
	}

	//vs done


	else if (u.checked == true && h2.checked == true) {
		//put1.value holds v and put2.value holds u
		let c = false; let flag = 10000;
		let lquality1 = 0, lquality2 = 0;
		for (let i = 0; i < uh.length; i++) {
			let quality1 = (put1.value - uh[i][0]) / uh[i][1];
			let quality2 = (put2.value - uh[i][2]) / uh[i][3];
			let diff = quality1 - quality2;
			if (diff == 0)
				c = true;           //well within the two phase zone if c == true
			if (c == true)
				break;
			if (flag > (Math.abs(quality1 - quality2))) {
				flag = Math.abs(quality1 - quality2);
				lquality1 = quality1;
				lquality2 = quality2;
			}
		}
		if (c == true)
		element.innerText=('Two phase zone');
		else if (lquality2 - lquality1 == flag)
		element.innerText=("Compressed water zone");
		else
		element.innerText=('Superheated zone');
	}

	//u-h done 

	else if (u2.checked == true && h.checked == true) {
		let c = false; let flag = 10000;
		let lquality1 = 0, lquality2 = 0;
		for (let i = 0; i < uh.length; i++) {
			let quality1 = (put2.value - uh[i][0]) / uh[i][1];
			let quality2 = (put1.value - uh[i][2]) / uh[i][3];
			let diff = quality1 - quality2;
			if (diff == 0)
				c = true;           //well within the two phase zone if c == true
			if (c == true)
				break;
			if (flag > (Math.abs(quality1 - quality2))) {
				flag = Math.abs(quality1 - quality2);
				lquality1 = quality1;
				lquality2 = quality2;
			}
		}
		if (c == true)
		element.innerText=('Two phase zone');
		else if (lquality2 - lquality1 == flag)
		element.innerText=("Compressed water zone");
		else
		element.innerText=('Superheated zone');
	}


	else if (u.checked == true && s2.checked == true) {
		//put1.value holds v and put2.value holds u
		let c = false; let flag = 10000;
		let lquality1 = 0, lquality2 = 0;
		for (let i = 0; i < us.length; i++) {
			let quality1 = (put1.value - us[i][0]) / us[i][1];
			let quality2 = (put2.value - us[i][2]) / us[i][3];
			let diff = quality1 - quality2;
			if (diff == 0)
				c = true;           //well within the two phase zone if c == true
			if (c == true)
				break;
			if (flag > (Math.abs(quality1 - quality2))) {
				flag = Math.abs(quality1 - quality2);
				lquality1 = quality1;
				lquality2 = quality2;
			}
		}
		if (c == true)
		element.innerText=('Two phase zone');
		else if (lquality2 - lquality1 == flag)
		element.innerText=("Compressed water zone");
		else
		element.innerText=('Superheated zone');
	}


	else if (u2.checked == true && s.checked == true) {
		let c = false; let flag = 10000;
		let lquality1 = 0, lquality2 = 0;
		for (let i = 0; i < us.length; i++) {
			let quality1 = (put2.value - us[i][0]) / us[i][1];
			let quality2 = (put1.value - us[i][2]) / us[i][3];
			let diff = quality1 - quality2;
			if (diff == 0)
				c = true;           //well within the two phase zone if c == true
			if (c == true)
				break;
			if (flag > (Math.abs(quality1 - quality2))) {
				flag = Math.abs(quality1 - quality2);
				lquality1 = quality1;
				lquality2 = quality2;
			}
		}
		if (c == true)
		element.innerText=('Two phase zone');
		else if (lquality2 - lquality1 == flag)
		element.innerText=("Compressed water zone");
		else
		element.innerText=('Superheated zone');
	}


	//u-s done and dusted

	else if (h.checked == true && s2.checked == true) {
		//put1.value holds v and put2.value holds u
		let c = false; let flag = 10000;
		let lquality1 = 0, lquality2 = 0;
		for (let i = 0; i < hs.length; i++) {
			let quality1 = (put1.value - hs[i][0]) / hs[i][1];
			let quality2 = (put2.value - hs[i][2]) / hs[i][3];
			let diff = quality1 - quality2;
			if (diff == 0)
				c = true;           //well within the two phase zone if c == true
			if (c == true)
				break;
			if (flag > (Math.abs(quality1 - quality2))) {
				flag = Math.abs(quality1 - quality2);
				lquality1 = quality1;
				lquality2 = quality2;
			}
		}
		if (c == true)
		element.innerText=('Two phase zone');
		else if (lquality2 - lquality1 == flag)
		element.innerText=("Compressed water zone");
		else
		element.innerText=('Superheated zone');
	}


	else if (h2.checked == true && s.checked == true) {
		let c = false; let flag = 10000;
		let lquality1 = 0, lquality2 = 0;
		for (let i = 0; i < hs.length; i++) {
			let quality1 = (put2.value - hs[i][0]) / hs[i][1];
			let quality2 = (put1.value - hs[i][2]) / hs[i][3];
			let diff = quality1 - quality2;
			if (diff == 0)
				c = true;           //well within the two phase zone if c == true
			if (c == true)
				break;
			if (flag > (Math.abs(quality1 - quality2))) {
				flag = Math.abs(quality1 - quality2);
				lquality1 = quality1;
				lquality2 = quality2;
			}
		}
		if (c == true)
		element.innerText=('Two phase zone');
		else if (lquality2 - lquality1 == flag)
		element.innerText=("Compressed water zone");
		else
		element.innerText=('Superheated zone');
	}

	//h-s plane done and dusted   

	else
		console.log('no inputs found');



};







// The above is only for zone Selection